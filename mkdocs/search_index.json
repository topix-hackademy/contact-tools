{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Contact-tools Documentation\n\n\nWelcome to the Contact-Tools Documentation made with love by TOP-IX Hackademy \n3.\n\n\nDocumentation Schema\n\n\nHere the structure of the documentation:\n\n\n\n\nData Model\n - Infos about the models - \nview\n\n\nAPI\n - API Documentation - \nview\n\n\nDEPLOY\n - How To Deploy Django on Apache2 - \nview\n\n\n\n\nProject layout\n\n\ncontacts/           # App Folder, contains models and API\ncontacttols/        # Admin Folder, contains settings and base management of the project\ndocumentation/\n    index.md        # The documentation homepage.\n    ...             # Other markdown pages, images and other files.\nfabfile.py          # Fab File, we use python Fabric to manage the project\nrequirements.txt    # File with the project requirements", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-contact-tools-documentation", 
            "text": "Welcome to the Contact-Tools Documentation made with love by TOP-IX Hackademy  3.", 
            "title": "Welcome to Contact-tools Documentation"
        }, 
        {
            "location": "/#documentation-schema", 
            "text": "Here the structure of the documentation:   Data Model  - Infos about the models -  view  API  - API Documentation -  view  DEPLOY  - How To Deploy Django on Apache2 -  view", 
            "title": "Documentation Schema"
        }, 
        {
            "location": "/#project-layout", 
            "text": "contacts/           # App Folder, contains models and API\ncontacttols/        # Admin Folder, contains settings and base management of the project\ndocumentation/\n    index.md        # The documentation homepage.\n    ...             # Other markdown pages, images and other files.\nfabfile.py          # Fab File, we use python Fabric to manage the project\nrequirements.txt    # File with the project requirements", 
            "title": "Project layout"
        }, 
        {
            "location": "/datamodel/", 
            "text": "Data Model Documentation\n\n\nIntroduction\n\n\nWe designed to have a simple data model with this particular relations schema:\n\n\n\n\nCompany\n - \nview\n\n\nCompany Type\n - \nview\n\n\nContact\n - \nview\n\n\nContact Type\n - \nview\n\n\nContact/Company ManyToMany Relation\n - \nview\n\n\nService\n - \nview\n\n\n\n\nHere the ER Model.", 
            "title": "Home"
        }, 
        {
            "location": "/datamodel/#data-model-documentation", 
            "text": "", 
            "title": "Data Model Documentation"
        }, 
        {
            "location": "/datamodel/#introduction", 
            "text": "We designed to have a simple data model with this particular relations schema:   Company  -  view  Company Type  -  view  Contact  -  view  Contact Type  -  view  Contact/Company ManyToMany Relation  -  view  Service  -  view   Here the ER Model.", 
            "title": "Introduction"
        }, 
        {
            "location": "/datamodel/company/", 
            "text": "Company\n\n\nIn this model we are going to save all the list of companies. \n\n\nUsing the key \ncompany_type\n we have created a \nMany To Many Relation\n between tables Company and CompanyType.\nFor each Company we save this list of attributes:\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\ncompany_custom_id\n\n\nFalse\n\n\nINT\n\n\nUnique Custom ID\n\n\n\n\n\n\ncompany_name\n\n\nFalse\n\n\nCHAR\n\n\nName of the Company\n\n\n\n\n\n\ncompany_short_name\n\n\nFalse\n\n\nCHAR\n\n\nShort Name of the Company\n\n\n\n\n\n\ncompany_business_name\n\n\nFalse\n\n\nCHAR\n\n\nUnique Name of the Company\n\n\n\n\n\n\ncompany_vat_number\n\n\nTrue\n\n\nINT\n\n\nVAT Number\n\n\n\n\n\n\ncompany_tax_code\n\n\nTrue\n\n\nINT\n\n\nTAX Code\n\n\n\n\n\n\ncompany_address\n\n\nFalse\n\n\nCHAR\n\n\nAddress of the Company\n\n\n\n\n\n\ncompany_cap\n\n\nFalse\n\n\nCHAR\n\n\nCAP Address of the Company\n\n\n\n\n\n\ncompany_city\n\n\nFalse\n\n\nCHAR\n\n\nCity of the Company\n\n\n\n\n\n\ncompany_province\n\n\nTrue\n\n\nCHAR\n\n\nCity Province of the Company\n\n\n\n\n\n\ncompany_country\n\n\nFalse\n\n\nCHAR\n\n\nCountry of the Company\n\n\n\n\n\n\ncompany_phone_number\n\n\nTrue\n\n\nCHAR\n\n\nPhone Number of the Company\n\n\n\n\n\n\ncompany_fax\n\n\nTrue\n\n\nCHAR\n\n\nFax of the Company\n\n\n\n\n\n\ncompany_website\n\n\nTrue\n\n\nCHAR\n\n\nWebSite of the Company\n\n\n\n\n\n\ncompany_notes\n\n\nTrue\n\n\nTEXT\n\n\nNotes about the Company\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date of the Record\n\n\n\n\n\n\ncompany_type\n\n\nTrue\n\n\nCHAR\n\n\nType (ManyToMany  with CompanyType)\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nCompany\n in the Admin Area:\n\n\nclass CompanyAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Company Info', {'fields': ['company_custom_id', 'company_name', 'company_short_name',\n                                     'company_business_name', 'company_vat_number', 'company_tax_code']}),\n        ('Company Address', {'fields': ['company_address', 'company_cap', 'company_city', 'company_province',\n                                        'company_country']}),\n        ('Company Contacs', {'fields': ['company_phone_number', 'company_fax', 'company_website']}),\n        ('Company Type', {'fields': ['company_type']}),\n        ('Notes', {'fields': ['company_notes']})\n    ]\n    list_display = ('company_name', 'company_short_name', 'company_custom_id', 'company_vat_number', 'company_tax_code')\n    search_fields = ['company_name', 'company_short_name', 'company_vat_number', 'company_tax_code']\n\n\n\nCompany Type\n\n\nThis model is used to specify the type of each Company (Peering / Clients / ...).\nHere the attributes:\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\ntype_name\n\n\nFalse\n\n\nCHAR\n\n\nName of the type\n\n\n\n\n\n\nis_valid\n\n\nFalse\n\n\nBOOLEAN\n\n\nTRUE if the type is available\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nCompanyType\n in the Admin Area:\n\n\nclass CompanyTypeAdmin(admin.ModelAdmin):\n\n    fieldsets = [\n        ('Company Type', {'fields': ['type_name', 'is_valid']}),\n    ]\n    list_display = ('type_name', 'is_valid', 'creation_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['type_name']", 
            "title": "Company"
        }, 
        {
            "location": "/datamodel/company/#company", 
            "text": "In this model we are going to save all the list of companies.   Using the key  company_type  we have created a  Many To Many Relation  between tables Company and CompanyType.\nFor each Company we save this list of attributes:     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      company_custom_id  False  INT  Unique Custom ID    company_name  False  CHAR  Name of the Company    company_short_name  False  CHAR  Short Name of the Company    company_business_name  False  CHAR  Unique Name of the Company    company_vat_number  True  INT  VAT Number    company_tax_code  True  INT  TAX Code    company_address  False  CHAR  Address of the Company    company_cap  False  CHAR  CAP Address of the Company    company_city  False  CHAR  City of the Company    company_province  True  CHAR  City Province of the Company    company_country  False  CHAR  Country of the Company    company_phone_number  True  CHAR  Phone Number of the Company    company_fax  True  CHAR  Fax of the Company    company_website  True  CHAR  WebSite of the Company    company_notes  True  TEXT  Notes about the Company    creation_date  False  DATETIME  Creation Date of the Record    company_type  True  CHAR  Type (ManyToMany  with CompanyType)", 
            "title": "Company"
        }, 
        {
            "location": "/datamodel/company/#code-snippet", 
            "text": "Here the code used to Register the Admin Form for table  Company  in the Admin Area:  class CompanyAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Company Info', {'fields': ['company_custom_id', 'company_name', 'company_short_name',\n                                     'company_business_name', 'company_vat_number', 'company_tax_code']}),\n        ('Company Address', {'fields': ['company_address', 'company_cap', 'company_city', 'company_province',\n                                        'company_country']}),\n        ('Company Contacs', {'fields': ['company_phone_number', 'company_fax', 'company_website']}),\n        ('Company Type', {'fields': ['company_type']}),\n        ('Notes', {'fields': ['company_notes']})\n    ]\n    list_display = ('company_name', 'company_short_name', 'company_custom_id', 'company_vat_number', 'company_tax_code')\n    search_fields = ['company_name', 'company_short_name', 'company_vat_number', 'company_tax_code']", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/datamodel/company/#company-type", 
            "text": "This model is used to specify the type of each Company (Peering / Clients / ...).\nHere the attributes:     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      type_name  False  CHAR  Name of the type    is_valid  False  BOOLEAN  TRUE if the type is available    creation_date  False  DATETIME  Creation Date", 
            "title": "Company Type"
        }, 
        {
            "location": "/datamodel/company/#code-snippet_1", 
            "text": "Here the code used to Register the Admin Form for table  CompanyType  in the Admin Area:  class CompanyTypeAdmin(admin.ModelAdmin):\n\n    fieldsets = [\n        ('Company Type', {'fields': ['type_name', 'is_valid']}),\n    ]\n    list_display = ('type_name', 'is_valid', 'creation_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['type_name']", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/datamodel/contact/", 
            "text": "Contact\n\n\nIn this model we are going to save all the list of contacs. \n\n\nFor each Contact we save this list of attributes:\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\ncontact_username\n\n\nFalse\n\n\nCHAR\n\n\nUsername of the Contacts\n\n\n\n\n\n\ncontact_first_name\n\n\nTrue\n\n\nCHAR\n\n\nFirst Name of the Contacts\n\n\n\n\n\n\ncontact_last_name\n\n\nTrue\n\n\nCHAR\n\n\nLast Name of the Contacts\n\n\n\n\n\n\ncontact_email\n\n\nFalse\n\n\nEMAIL\n\n\nEmail of the Contacts\n\n\n\n\n\n\ncontact_phone\n\n\nTrue\n\n\nCHAR\n\n\nPhone Number of the Contacts\n\n\n\n\n\n\ncontact_notes\n\n\nTrue\n\n\nTEXT\n\n\nNotes about of the Contacts\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nContact\n in the Admin Area:\n\n\nclass ContactAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Contact Info', {'fields': ['contact_username', 'contact_first_name', 'contact_last_name']}),\n        ('Contact Address', {'fields': ['contact_email', 'contact_phone']}),\n        ('Notes', {'fields': ['contact_notes']})\n    ]\n    list_display = ('contact_username', 'contact_email', 'contact_first_name', 'contact_last_name')\n    search_fields = ['contact_username', 'contact_email', 'contact_last_name']\n\n\n\nContact Type\n\n\nThis model is used to specify the type of each Contact (Technical / Manager / Consultant / ...). \nHere the attributes:\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\ntype_name\n\n\nFalse\n\n\nCHAR\n\n\nName of the type\n\n\n\n\n\n\nis_valid\n\n\nFalse\n\n\nBOOLEAN\n\n\nTRUE if the type is available\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nContactType\n in the Admin Area:\n\n\nclass ContactTypeAdmin(admin.ModelAdmin):\n\n    fieldsets = [\n        ('Contact Type', {'fields': ['type_name', 'is_valid']}),\n    ]\n    list_display = ('type_name', 'is_valid', 'creation_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['type_name']", 
            "title": "Contact"
        }, 
        {
            "location": "/datamodel/contact/#contact", 
            "text": "In this model we are going to save all the list of contacs.   For each Contact we save this list of attributes:     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      contact_username  False  CHAR  Username of the Contacts    contact_first_name  True  CHAR  First Name of the Contacts    contact_last_name  True  CHAR  Last Name of the Contacts    contact_email  False  EMAIL  Email of the Contacts    contact_phone  True  CHAR  Phone Number of the Contacts    contact_notes  True  TEXT  Notes about of the Contacts    creation_date  False  DATETIME  Creation Date", 
            "title": "Contact"
        }, 
        {
            "location": "/datamodel/contact/#code-snippet", 
            "text": "Here the code used to Register the Admin Form for table  Contact  in the Admin Area:  class ContactAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Contact Info', {'fields': ['contact_username', 'contact_first_name', 'contact_last_name']}),\n        ('Contact Address', {'fields': ['contact_email', 'contact_phone']}),\n        ('Notes', {'fields': ['contact_notes']})\n    ]\n    list_display = ('contact_username', 'contact_email', 'contact_first_name', 'contact_last_name')\n    search_fields = ['contact_username', 'contact_email', 'contact_last_name']", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/datamodel/contact/#contact-type", 
            "text": "This model is used to specify the type of each Contact (Technical / Manager / Consultant / ...). \nHere the attributes:     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      type_name  False  CHAR  Name of the type    is_valid  False  BOOLEAN  TRUE if the type is available    creation_date  False  DATETIME  Creation Date", 
            "title": "Contact Type"
        }, 
        {
            "location": "/datamodel/contact/#code-snippet_1", 
            "text": "Here the code used to Register the Admin Form for table  ContactType  in the Admin Area:  class ContactTypeAdmin(admin.ModelAdmin):\n\n    fieldsets = [\n        ('Contact Type', {'fields': ['type_name', 'is_valid']}),\n    ]\n    list_display = ('type_name', 'is_valid', 'creation_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['type_name']", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/datamodel/relation/", 
            "text": "CCRelations\n\n\nIn this model we are going to save the relations between \nCompany\n and \nContacts\n. Since each contacts can belong to more then one Company we've created a pivot Table.\n\n\nWe have only 3 parameters, each one is a \nForeignKey\n for the One To Many Relation. We also added to this table the information about the Type of contacts for each relation Contact / Company.\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\ncompany\n\n\nFalse\n\n\nFOREIGN-KEY\n\n\nCompany ID\n\n\n\n\n\n\ncontact\n\n\nFalse\n\n\nFOREIGN-KEY\n\n\nContact ID\n\n\n\n\n\n\ncontact_type\n\n\nFalse\n\n\nFOREIGN-KEY\n\n\nContactType ID\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nCCRelation\n in the Admin Area:\n\n\nclass CCRelationAdmin(admin.ModelAdmin):\n    list_display = ('company', 'contact', 'contact_type')", 
            "title": "Relations"
        }, 
        {
            "location": "/datamodel/relation/#ccrelations", 
            "text": "In this model we are going to save the relations between  Company  and  Contacts . Since each contacts can belong to more then one Company we've created a pivot Table.  We have only 3 parameters, each one is a  ForeignKey  for the One To Many Relation. We also added to this table the information about the Type of contacts for each relation Contact / Company.     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      company  False  FOREIGN-KEY  Company ID    contact  False  FOREIGN-KEY  Contact ID    contact_type  False  FOREIGN-KEY  ContactType ID    creation_date  False  DATETIME  Creation Date", 
            "title": "CCRelations"
        }, 
        {
            "location": "/datamodel/relation/#code-snippet", 
            "text": "Here the code used to Register the Admin Form for table  CCRelation  in the Admin Area:  class CCRelationAdmin(admin.ModelAdmin):\n    list_display = ('company', 'contact', 'contact_type')", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/datamodel/service/", 
            "text": "Service\n\n\nWe declared a model \nService\n to save and create tokens for give access to the API Service.\n\n\nFor each Service we have this parameters:\n\n\n\n\n\n\n\n\nFIELD NAME\n\n\nNULLABLE\n\n\nTYPE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nservice_name\n\n\nFalse\n\n\nCHAR\n\n\nService Name\n\n\n\n\n\n\ntoken_name\n\n\nFalse\n\n\nCHAR\n\n\nToken Used to have access\n\n\n\n\n\n\nis_valid\n\n\nFalse\n\n\nBOOL\n\n\nBoolean Value\n\n\n\n\n\n\ncreation_date\n\n\nFalse\n\n\nDATETIME\n\n\nCreation Date\n\n\n\n\n\n\nactivation_date\n\n\nTrue\n\n\nDATETIME\n\n\nActivation Date of the service\n\n\n\n\n\n\ndelete_date\n\n\nTrue\n\n\nDATETIME\n\n\nDismission Date of the service\n\n\n\n\n\n\nnotes\n\n\nFalse\n\n\nTEXT\n\n\nAddress of the Company\n\n\n\n\n\n\n\n\nCode Snippet\n\n\nHere the code used to Register the Admin Form for table \nService\n in the Admin Area:\n\n\nfieldsets = [\n        ('Service Info', {'fields': ['service_name', 'is_valid']}),\n        ('Token Management', {'fields': ['token']}),\n        ('Notes', {'fields': ['notes']})\n    ]\n    list_display = ('service_name', 'token','is_valid', 'creation_date', 'activation_date', 'delete_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['service_name']\n\n\n    def save_model(self, request, obj, form, change):\n        if change:\n            old_obj = Service.objects.get(id=obj.id)\n            if old_obj.is_valid and not obj.is_valid:\n                # set service not valid\n                obj.delete_date = datetime.datetime.now()\n                obj.token = \"INVALID\"\n            elif not old_obj.is_valid and obj.is_valid:\n                # set service valid\n                obj.delete_date = None\n                obj.activation_date = datetime.datetime.now()\n        obj.save()\n\n\n\nWe are overriding the method \nsave_model\n to set / unset the fields \nactivation_date\n and \ndelete_date\n when the value \nis_valid\n is set / unset.", 
            "title": "Service"
        }, 
        {
            "location": "/datamodel/service/#service", 
            "text": "We declared a model  Service  to save and create tokens for give access to the API Service.  For each Service we have this parameters:     FIELD NAME  NULLABLE  TYPE  DESCRIPTION      service_name  False  CHAR  Service Name    token_name  False  CHAR  Token Used to have access    is_valid  False  BOOL  Boolean Value    creation_date  False  DATETIME  Creation Date    activation_date  True  DATETIME  Activation Date of the service    delete_date  True  DATETIME  Dismission Date of the service    notes  False  TEXT  Address of the Company", 
            "title": "Service"
        }, 
        {
            "location": "/datamodel/service/#code-snippet", 
            "text": "Here the code used to Register the Admin Form for table  Service  in the Admin Area:  fieldsets = [\n        ('Service Info', {'fields': ['service_name', 'is_valid']}),\n        ('Token Management', {'fields': ['token']}),\n        ('Notes', {'fields': ['notes']})\n    ]\n    list_display = ('service_name', 'token','is_valid', 'creation_date', 'activation_date', 'delete_date')\n    list_filter = ['creation_date', 'is_valid']\n    search_fields = ['service_name']\n\n\n    def save_model(self, request, obj, form, change):\n        if change:\n            old_obj = Service.objects.get(id=obj.id)\n            if old_obj.is_valid and not obj.is_valid:\n                # set service not valid\n                obj.delete_date = datetime.datetime.now()\n                obj.token = \"INVALID\"\n            elif not old_obj.is_valid and obj.is_valid:\n                # set service valid\n                obj.delete_date = None\n                obj.activation_date = datetime.datetime.now()\n        obj.save()  We are overriding the method  save_model  to set / unset the fields  activation_date  and  delete_date  when the value  is_valid  is set / unset.", 
            "title": "Code Snippet"
        }, 
        {
            "location": "/api/", 
            "text": "CONTACT-TOOLS API DOCUMENTATION\n\n\nResources\n\n\nThrough APIs we perform access to Contact and Company data models. Check this two links for the details:\n\n\n\n\n\n\nCompany\n\n\n\n\n\n\nCompany Type\n\n\n\n\n\n\nContact\n\n\n\n\n\n\nContact Type\n\n\n\n\n\n\nVersion\n\n\nAPIs are reachable from a standard endpoint for version-1:\n\n\n/api/v1/{resource-name}\n\n\n\nAuthorization\n\n\nAll the APIs are authenticated. To have access you need to specify a \nservice-token\n from the data model \nService\n in your request header. Here an example:\n\n\nwget http://example.com/api/v1/company/1 \n        --header=\"AUTH-TOKEN: YOUR-SERVICE-TOKEN\" \n        --header=\"CONTENT-TYPE: application/json\"\n\n\n\nWithout the \nservice-token\n you will receive a \n403 Forbidden\n with message:\n\n\n{\n  \"message\": \"Permission denied\"\n}", 
            "title": "Home"
        }, 
        {
            "location": "/api/#contact-tools-api-documentation", 
            "text": "", 
            "title": "CONTACT-TOOLS API DOCUMENTATION"
        }, 
        {
            "location": "/api/#resources", 
            "text": "Through APIs we perform access to Contact and Company data models. Check this two links for the details:    Company    Company Type    Contact    Contact Type", 
            "title": "Resources"
        }, 
        {
            "location": "/api/#version", 
            "text": "APIs are reachable from a standard endpoint for version-1:  /api/v1/{resource-name}", 
            "title": "Version"
        }, 
        {
            "location": "/api/#authorization", 
            "text": "All the APIs are authenticated. To have access you need to specify a  service-token  from the data model  Service  in your request header. Here an example:  wget http://example.com/api/v1/company/1 \n        --header=\"AUTH-TOKEN: YOUR-SERVICE-TOKEN\" \n        --header=\"CONTENT-TYPE: application/json\"  Without the  service-token  you will receive a  403 Forbidden  with message:  {\n  \"message\": \"Permission denied\"\n}", 
            "title": "Authorization"
        }, 
        {
            "location": "/api/company/", 
            "text": "Company API\n\n\nAll the resources for the company model are reachable at this endpoint:\n\n\n/api/v1/company/\n\n\n\nCollection Resources\n\n\n\n\n\n\n\n\nVerb\n\n\nUsage\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nRead\n\n\n---\n\n\n\n\n\n\nPOST\n\n\nCreate\n\n\nCreate a new Company\n\n\n\n\n\n\nPUT\n\n\nCreate\n\n\nCreate a new Company if does not exists\n\n\n\n\n\n\nPUT\n\n\nUpdate\n\n\nUpdate the company, all fields\n\n\n\n\n\n\nDELETE\n\n\nX\n\n\nDelete is not implemented. To delete a resource use PUT verb and change the field \nis_valid\n\n\n\n\n\n\n\n\nError Management\n\n\nIn case of content error you will receive a \n400 Bad Request\n with a message like:\n\n\n{\n  \"company_type\": [\n    \"This field is required.\"\n  ],\n  \"company_tax_code\": [\n    \"Company with this Tax Code already exists.\"\n  ]\n}\n\n\n\nGET ALL\n\n\nGET /api/v1/company/\n\n\n\nExample of output:\n\n\n[\n  {\n    \"id\": 1,\n    \"company_custom_id\": 1,\n    \"company_name\": \"Custom Company 1\",\n    \"company_short_name\": \"CustComp1\",\n    \"company_business_name\": \"Custom Company 1\",\n    \"company_vat_number\": 12312312,\n    \"company_tax_code\": null,\n    \"company_address\": \"address-info\",\n    \"company_cap\": \"123\",\n    \"company_city\": \"turin\",\n    \"company_province\": \"\",\n    \"company_country\": \"italy\",\n    \"company_phone_number\": \"2132133112\",\n    \"company_fax\": \"\",\n    \"company_website\": \"\",\n    \"company_notes\": \"\",\n    \"creation_date\": \"2016-07-13T09:15:36.633000Z\",\n    \"company_type\": [\n      {\n        \"id\": 1,\n        \"type_name\": \"PEERING\",\n        \"is_valid\": true,\n        \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n      }\n    ]\n  },\n  ...\n]\n\n\n\nGET ONE\n\n\nGET /api/v1/company/{id-resource}/\n\n\n\nExample of output:\n\n\n{\n  \"id\": 1,\n  \"company_custom_id\": 1,\n  \"company_name\": \"Custom Company 1\",\n  \"company_short_name\": \"CustComp1\",\n  \"company_business_name\": \"Custom Company 1\",\n  \"company_vat_number\": 12312312,\n  \"company_tax_code\": null,\n  \"company_address\": \"address-info\",\n  \"company_cap\": \"123\",\n  \"company_city\": \"turin\",\n  \"company_province\": \"\",\n  \"company_country\": \"italy\",\n  \"company_phone_number\": \"2132133112\",\n  \"company_fax\": \"\",\n  \"company_website\": \"\",\n  \"company_notes\": \"\",\n  \"creation_date\": \"2016-07-13T09:15:36.633000Z\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": [\n      {\n        \"contact\": {\n          \"contact_email\": \"user1@email.it\",\n          \"id\": 3,\n          \"contact_username\": \"user1\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}\n\n\n\nCREATE\n\n\nPOST /api/v1/company/\n\n\n\nExample of input body:\n\n\n{\n    \"company_custom_id\": 110, \"company_short_name\": \"newComp1\", \"company_name\": \"newCompany1\", \n    \"company_business_name\": \"newCompany1\", \"company_tax_code\": 111000111,\n    \"company_city\": \"Turin1\", \"company_province\": \"Turin1\", \n    \"company_country\": \"Italy1\",  \"company_address\": \"via delle vie1\", \n    \"company_cap\": \"121231\",\n    \"company_phone_number\": \"1231231311\", \"company_fax\": \"1231231231\",  \n    \"company_website\": \"example.com1\", \"company_notes\": \"just a simple note1\", \n    \"company_type\":[{\"type_name\":\"PEERING\", \"id\":1}]\n}\n\n\n\nExample of output:\n\n\n{\n  \"id\": 11,\n  \"company_custom_id\": 110,\n  \"company_name\": \"newCompany1\",\n  \"company_short_name\": \"newComp1\",\n  \"company_business_name\": \"newCompany1\",\n  \"company_vat_number\": null,\n  \"company_tax_code\": 111000111,\n  \"company_address\": \"via delle vie1\",\n  \"company_cap\": \"121231\",\n  \"company_city\": \"Turin1\",\n  \"company_province\": \"Turin1\",\n  \"company_country\": \"Italy1\",\n  \"company_phone_number\": \"1231231311\",\n  \"company_fax\": \"1231231231\",\n  \"company_website\": \"example.com1\",\n  \"company_notes\": \"just a simple note1\",\n  \"creation_date\": \"2016-07-18T12:54:33.389902\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": []\n  }\n}\n\n\n\nUPDATE\n\n\nPUT /api/v1/company/{id-resource}/\n\n\n\nExample of input body:\n\n\n{\n    \"company_custom_id\": 110, \"company_short_name\": \"NEW-NAME\", \"company_name\": \"newCompany1\", \n    \"company_business_name\": \"newCompany1\", \"company_tax_code\": 111000111,\n    \"company_city\": \"Turin1\", \"company_province\": \"Turin1\", \n    \"company_country\": \"Italy1\",  \"company_address\": \"via delle vie1\", \n    \"company_cap\": \"121231\",\n    \"company_phone_number\": \"1231231311\", \"company_fax\": \"1231231231\",  \n    \"company_website\": \"example.com1\", \"company_notes\": \"just a simple note1\", \n    \"company_type\":[{\"type_name\":\"PEERING\", \"id\":1}]\n}\n\n\n\nExample of output:\n\n\n{\n  \"id\": 11,\n  \"company_custom_id\": 110,\n  \"company_name\": \"newCompany1\",\n  \"company_short_name\": \"NEW-NAME\",\n  \"company_business_name\": \"newCompany1\",\n  \"company_vat_number\": null,\n  \"company_tax_code\": 111000111,\n  \"company_address\": \"via delle vie1\",\n  \"company_cap\": \"121231\",\n  \"company_city\": \"Turin1\",\n  \"company_province\": \"Turin1\",\n  \"company_country\": \"Italy1\",\n  \"company_phone_number\": \"1231231311\",\n  \"company_fax\": \"1231231231\",\n  \"company_website\": \"example.com1\",\n  \"company_notes\": \"just a simple note1\",\n  \"creation_date\": \"2016-07-18T12:54:33.389902\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": []\n  }\n}", 
            "title": "Company"
        }, 
        {
            "location": "/api/company/#company-api", 
            "text": "All the resources for the company model are reachable at this endpoint:  /api/v1/company/", 
            "title": "Company API"
        }, 
        {
            "location": "/api/company/#collection-resources", 
            "text": "Verb  Usage  Notes      GET  Read  ---    POST  Create  Create a new Company    PUT  Create  Create a new Company if does not exists    PUT  Update  Update the company, all fields    DELETE  X  Delete is not implemented. To delete a resource use PUT verb and change the field  is_valid", 
            "title": "Collection Resources"
        }, 
        {
            "location": "/api/company/#error-management", 
            "text": "In case of content error you will receive a  400 Bad Request  with a message like:  {\n  \"company_type\": [\n    \"This field is required.\"\n  ],\n  \"company_tax_code\": [\n    \"Company with this Tax Code already exists.\"\n  ]\n}", 
            "title": "Error Management"
        }, 
        {
            "location": "/api/company/#get-all", 
            "text": "GET /api/v1/company/  Example of output:  [\n  {\n    \"id\": 1,\n    \"company_custom_id\": 1,\n    \"company_name\": \"Custom Company 1\",\n    \"company_short_name\": \"CustComp1\",\n    \"company_business_name\": \"Custom Company 1\",\n    \"company_vat_number\": 12312312,\n    \"company_tax_code\": null,\n    \"company_address\": \"address-info\",\n    \"company_cap\": \"123\",\n    \"company_city\": \"turin\",\n    \"company_province\": \"\",\n    \"company_country\": \"italy\",\n    \"company_phone_number\": \"2132133112\",\n    \"company_fax\": \"\",\n    \"company_website\": \"\",\n    \"company_notes\": \"\",\n    \"creation_date\": \"2016-07-13T09:15:36.633000Z\",\n    \"company_type\": [\n      {\n        \"id\": 1,\n        \"type_name\": \"PEERING\",\n        \"is_valid\": true,\n        \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n      }\n    ]\n  },\n  ...\n]", 
            "title": "GET ALL"
        }, 
        {
            "location": "/api/company/#get-one", 
            "text": "GET /api/v1/company/{id-resource}/  Example of output:  {\n  \"id\": 1,\n  \"company_custom_id\": 1,\n  \"company_name\": \"Custom Company 1\",\n  \"company_short_name\": \"CustComp1\",\n  \"company_business_name\": \"Custom Company 1\",\n  \"company_vat_number\": 12312312,\n  \"company_tax_code\": null,\n  \"company_address\": \"address-info\",\n  \"company_cap\": \"123\",\n  \"company_city\": \"turin\",\n  \"company_province\": \"\",\n  \"company_country\": \"italy\",\n  \"company_phone_number\": \"2132133112\",\n  \"company_fax\": \"\",\n  \"company_website\": \"\",\n  \"company_notes\": \"\",\n  \"creation_date\": \"2016-07-13T09:15:36.633000Z\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": [\n      {\n        \"contact\": {\n          \"contact_email\": \"user1@email.it\",\n          \"id\": 3,\n          \"contact_username\": \"user1\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}", 
            "title": "GET ONE"
        }, 
        {
            "location": "/api/company/#create", 
            "text": "POST /api/v1/company/  Example of input body:  {\n    \"company_custom_id\": 110, \"company_short_name\": \"newComp1\", \"company_name\": \"newCompany1\", \n    \"company_business_name\": \"newCompany1\", \"company_tax_code\": 111000111,\n    \"company_city\": \"Turin1\", \"company_province\": \"Turin1\", \n    \"company_country\": \"Italy1\",  \"company_address\": \"via delle vie1\", \n    \"company_cap\": \"121231\",\n    \"company_phone_number\": \"1231231311\", \"company_fax\": \"1231231231\",  \n    \"company_website\": \"example.com1\", \"company_notes\": \"just a simple note1\", \n    \"company_type\":[{\"type_name\":\"PEERING\", \"id\":1}]\n}  Example of output:  {\n  \"id\": 11,\n  \"company_custom_id\": 110,\n  \"company_name\": \"newCompany1\",\n  \"company_short_name\": \"newComp1\",\n  \"company_business_name\": \"newCompany1\",\n  \"company_vat_number\": null,\n  \"company_tax_code\": 111000111,\n  \"company_address\": \"via delle vie1\",\n  \"company_cap\": \"121231\",\n  \"company_city\": \"Turin1\",\n  \"company_province\": \"Turin1\",\n  \"company_country\": \"Italy1\",\n  \"company_phone_number\": \"1231231311\",\n  \"company_fax\": \"1231231231\",\n  \"company_website\": \"example.com1\",\n  \"company_notes\": \"just a simple note1\",\n  \"creation_date\": \"2016-07-18T12:54:33.389902\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": []\n  }\n}", 
            "title": "CREATE"
        }, 
        {
            "location": "/api/company/#update", 
            "text": "PUT /api/v1/company/{id-resource}/  Example of input body:  {\n    \"company_custom_id\": 110, \"company_short_name\": \"NEW-NAME\", \"company_name\": \"newCompany1\", \n    \"company_business_name\": \"newCompany1\", \"company_tax_code\": 111000111,\n    \"company_city\": \"Turin1\", \"company_province\": \"Turin1\", \n    \"company_country\": \"Italy1\",  \"company_address\": \"via delle vie1\", \n    \"company_cap\": \"121231\",\n    \"company_phone_number\": \"1231231311\", \"company_fax\": \"1231231231\",  \n    \"company_website\": \"example.com1\", \"company_notes\": \"just a simple note1\", \n    \"company_type\":[{\"type_name\":\"PEERING\", \"id\":1}]\n}  Example of output:  {\n  \"id\": 11,\n  \"company_custom_id\": 110,\n  \"company_name\": \"newCompany1\",\n  \"company_short_name\": \"NEW-NAME\",\n  \"company_business_name\": \"newCompany1\",\n  \"company_vat_number\": null,\n  \"company_tax_code\": 111000111,\n  \"company_address\": \"via delle vie1\",\n  \"company_cap\": \"121231\",\n  \"company_city\": \"Turin1\",\n  \"company_province\": \"Turin1\",\n  \"company_country\": \"Italy1\",\n  \"company_phone_number\": \"1231231311\",\n  \"company_fax\": \"1231231231\",\n  \"company_website\": \"example.com1\",\n  \"company_notes\": \"just a simple note1\",\n  \"creation_date\": \"2016-07-18T12:54:33.389902\",\n  \"company_type\": [\n    {\n      \"id\": 1,\n      \"type_name\": \"PEERING\",\n      \"is_valid\": true,\n      \"creation_date\": \"2016-07-13T09:15:34.009000Z\"\n    }\n  ],\n  \"contacts\": {\n    \"relations\": []\n  }\n}", 
            "title": "UPDATE"
        }, 
        {
            "location": "/api/company_type/", 
            "text": "Company Type API", 
            "title": "Company Type"
        }, 
        {
            "location": "/api/company_type/#company-type-api", 
            "text": "", 
            "title": "Company Type API"
        }, 
        {
            "location": "/api/contact/", 
            "text": "Contact API\n\n\nAll the resources for the contact model are reachable at this endpoint:\n\n\n/api/v1/contact/\n\n\n\nCollection Resources\n\n\n\n\n\n\n\n\nVerb\n\n\nUsage\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nRead\n\n\n---\n\n\n\n\n\n\nPOST\n\n\nCreate\n\n\nCreate a new Contact\n\n\n\n\n\n\nPUT\n\n\nCreate\n\n\nCreate a new Contact if does not exists\n\n\n\n\n\n\nPUT\n\n\nUpdate\n\n\nUpdate the Contact, all fields\n\n\n\n\n\n\nDELETE\n\n\nX\n\n\nDelete is not implemented. To delete a resource use PUT verb and change the field \nis_valid\n\n\n\n\n\n\n\n\nError Management\n\n\nIn case of content error you will receive a \n400 Bad Request\n with a message like:\n\n\n{\n  \"contact_username\": [\n    \"This field is required.\"\n  ]\n}\n\n\n\nGET ALL\n\n\nGET /api/v1/contact/\n\n\n\nExample of output:\n\n\n[\n  {\n    \"id\": 1,\n    \"contact_username\": \"alex\",\n    \"contact_first_name\": \"alex\",\n    \"contact_last_name\": \"alex\",\n    \"contact_email\": \"alex@alex.it\",\n    \"contact_phone\": \"312312312\",\n    \"contact_notes\": \"\"\n  },\n  ...\n]\n\n\n\nGET ONE\n\n\nGET /api/v1/contact/{id-resource}/\n\n\n\nExample of output:\n\n\n{\n  \"id\": 1,\n  \"contact_username\": \"alex\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"alex@alex.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 1,\n          \"company_name\": \"Custom Company 1\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}\n\n\n\nCREATE\n\n\nPOST /api/v1/contact/\n\n\n\nExample of input body:\n\n\n{\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}\n\n\n\nExample of output:\n\n\n{\n  \"id\": 5,\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}\n\n\n\nUPDATE\n\n\nPUT /api/v1/contact/{id-resource}/\n\n\n\nExample of input body:\n\n\n{\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alexXXXXX\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n\n\n\nExample of output:\n\n\n{\n  \"id\": 5,\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alexXXXXX\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}", 
            "title": "Contact"
        }, 
        {
            "location": "/api/contact/#contact-api", 
            "text": "All the resources for the contact model are reachable at this endpoint:  /api/v1/contact/", 
            "title": "Contact API"
        }, 
        {
            "location": "/api/contact/#collection-resources", 
            "text": "Verb  Usage  Notes      GET  Read  ---    POST  Create  Create a new Contact    PUT  Create  Create a new Contact if does not exists    PUT  Update  Update the Contact, all fields    DELETE  X  Delete is not implemented. To delete a resource use PUT verb and change the field  is_valid", 
            "title": "Collection Resources"
        }, 
        {
            "location": "/api/contact/#error-management", 
            "text": "In case of content error you will receive a  400 Bad Request  with a message like:  {\n  \"contact_username\": [\n    \"This field is required.\"\n  ]\n}", 
            "title": "Error Management"
        }, 
        {
            "location": "/api/contact/#get-all", 
            "text": "GET /api/v1/contact/  Example of output:  [\n  {\n    \"id\": 1,\n    \"contact_username\": \"alex\",\n    \"contact_first_name\": \"alex\",\n    \"contact_last_name\": \"alex\",\n    \"contact_email\": \"alex@alex.it\",\n    \"contact_phone\": \"312312312\",\n    \"contact_notes\": \"\"\n  },\n  ...\n]", 
            "title": "GET ALL"
        }, 
        {
            "location": "/api/contact/#get-one", 
            "text": "GET /api/v1/contact/{id-resource}/  Example of output:  {\n  \"id\": 1,\n  \"contact_username\": \"alex\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"alex@alex.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 1,\n          \"company_name\": \"Custom Company 1\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}", 
            "title": "GET ONE"
        }, 
        {
            "location": "/api/contact/#create", 
            "text": "POST /api/v1/contact/  Example of input body:  {\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}  Example of output:  {\n  \"id\": 5,\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alex\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}", 
            "title": "CREATE"
        }, 
        {
            "location": "/api/contact/#update", 
            "text": "PUT /api/v1/contact/{id-resource}/  Example of input body:  {\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alexXXXXX\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }  Example of output:  {\n  \"id\": 5,\n  \"contact_username\": \"newuser\",\n  \"contact_first_name\": \"alexXXXXX\",\n  \"contact_last_name\": \"alex\",\n  \"contact_email\": \"new@user.it\",\n  \"contact_phone\": \"312312312\",\n  \"contact_notes\": \"\",\n  \"role\": {\n    \"relations\": [\n      {\n        \"company\": {\n          \"company_custom_id\": 2,\n          \"company_name\": \"Custom Company 2\"\n        },\n        \"role\": \"administration\"\n      }\n    ]\n  }\n}", 
            "title": "UPDATE"
        }, 
        {
            "location": "/api/contact_type/", 
            "text": "Contact Type API", 
            "title": "Contact Type"
        }, 
        {
            "location": "/api/contact_type/#contact-type-api", 
            "text": "", 
            "title": "Contact Type API"
        }, 
        {
            "location": "/deploy/", 
            "text": "Deploy Django - Apache2\n\n\nUpgrade Virtual Machine\n\n\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\n\nApache2 Installation\n\n\nsudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi\n\n\n\n\nInstallation DB mySql e phpMyAdmin\n\n\nsudo apt-get install mysql-server\nsudo apt-get install libmysqlclient-dev\nsudo apt-get install phpmyadmin php-mbstring php-gettext\n\n\n\n\nInstallation requirements for python, pip and virtualenv\n\n\napt-get install build-essential\napt-get install python-setuptools\napt-get install python-dev python-pip\npip install virtualenv\npip install MySQL-python\n\n\n\n\nInstallation git\n\n\napt-get install git\n\n\n\n\nDownload and setup APP Django\n\n\nUse GIT to download the app inside folder \n/var/www/\n, then create a virtualenv. \nAfter that install inside the virtualenv the requirements (infos are on Readme.md).\n\n\nRemember to change the setting file in according with you policy and deploy strategy.\n\n\nTo be sure to avoid security problem you can read the deploy checklist:\n\n\npython manage.py check --deploy \n\n\n\n\nSetup Static Files\n\n\nEvery time there is an update, we need to reload the static files (using fabric from the root of the project. \nONLY IN PRODUCTION\n):\n\n\nfab install_static\n\n\n\n\nCreate VirtualHost\n\n\nHere a base example of virtualhost:\n\n\n  \nVirtualHost *:80\n\n\n          ServerName contacts.top-ix.org\n          ServerAdmin hackademy@top-ix.org\n\n          WSGIScriptAlias / /var/www/contact-tools/contacttools/wsgi.py\n\n          WSGIDaemonProcess CONTACTS-TOPIX python-path=/var/www/contact-tools:/var/www/envContactTools/lib/python2.7/site-packages\n\n          WSGIProcessGroup CONTACTS-TOPIX\n\n          DocumentRoot /var/www/contact-tools\n\n          Alias /static/ /var/www/contact-tools/static_root/\n\n  \nDirectory /var/www/contact-tools/\n\n\n    Options ExecCGI MultiViews Indexes\n\n    MultiViewsMatch Handlers\n\n    AddHandler wsgi-script .py\n\n    AddHandler wsgi-script .wsgi\n\n    DirectoryIndex index.html index.py app.wsgi\n\n    Order allow,deny\n\n    Require all granted\n\n    Allow from all\n\n  \n/Directory\n\n          ErrorLog ${APACHE_LOG_DIR}/contact-tools-error.log\n          CustomLog ${APACHE_LOG_DIR}/contact-tools-access.log combined\n\n  \n/VirtualHost\n\n\n\n\n\nNow, enable the virtualhost and reload Apache:\n\n\na2ensite 001-myapp.conf\nservice apache2 reload", 
            "title": "DEPLOY"
        }, 
        {
            "location": "/deploy/#deploy-django-apache2", 
            "text": "", 
            "title": "Deploy Django - Apache2"
        }, 
        {
            "location": "/deploy/#upgrade-virtual-machine", 
            "text": "sudo apt-get update\nsudo apt-get upgrade", 
            "title": "Upgrade Virtual Machine"
        }, 
        {
            "location": "/deploy/#apache2-installation", 
            "text": "sudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi", 
            "title": "Apache2 Installation"
        }, 
        {
            "location": "/deploy/#installation-db-mysql-e-phpmyadmin", 
            "text": "sudo apt-get install mysql-server\nsudo apt-get install libmysqlclient-dev\nsudo apt-get install phpmyadmin php-mbstring php-gettext", 
            "title": "Installation DB mySql e phpMyAdmin"
        }, 
        {
            "location": "/deploy/#installation-requirements-for-python-pip-and-virtualenv", 
            "text": "apt-get install build-essential\napt-get install python-setuptools\napt-get install python-dev python-pip\npip install virtualenv\npip install MySQL-python", 
            "title": "Installation requirements for python, pip and virtualenv"
        }, 
        {
            "location": "/deploy/#installation-git", 
            "text": "apt-get install git", 
            "title": "Installation git"
        }, 
        {
            "location": "/deploy/#download-and-setup-app-django", 
            "text": "Use GIT to download the app inside folder  /var/www/ , then create a virtualenv. \nAfter that install inside the virtualenv the requirements (infos are on Readme.md).  Remember to change the setting file in according with you policy and deploy strategy.  To be sure to avoid security problem you can read the deploy checklist:  python manage.py check --deploy", 
            "title": "Download and setup APP Django"
        }, 
        {
            "location": "/deploy/#setup-static-files", 
            "text": "Every time there is an update, we need to reload the static files (using fabric from the root of the project.  ONLY IN PRODUCTION ):  fab install_static", 
            "title": "Setup Static Files"
        }, 
        {
            "location": "/deploy/#create-virtualhost", 
            "text": "Here a base example of virtualhost:     VirtualHost *:80 \n\n          ServerName contacts.top-ix.org\n          ServerAdmin hackademy@top-ix.org\n\n          WSGIScriptAlias / /var/www/contact-tools/contacttools/wsgi.py\n\n          WSGIDaemonProcess CONTACTS-TOPIX python-path=/var/www/contact-tools:/var/www/envContactTools/lib/python2.7/site-packages\n\n          WSGIProcessGroup CONTACTS-TOPIX\n\n          DocumentRoot /var/www/contact-tools\n\n          Alias /static/ /var/www/contact-tools/static_root/\n\n   Directory /var/www/contact-tools/ \n\n    Options ExecCGI MultiViews Indexes\n\n    MultiViewsMatch Handlers\n\n    AddHandler wsgi-script .py\n\n    AddHandler wsgi-script .wsgi\n\n    DirectoryIndex index.html index.py app.wsgi\n\n    Order allow,deny\n\n    Require all granted\n\n    Allow from all\n\n   /Directory \n          ErrorLog ${APACHE_LOG_DIR}/contact-tools-error.log\n          CustomLog ${APACHE_LOG_DIR}/contact-tools-access.log combined\n\n   /VirtualHost   Now, enable the virtualhost and reload Apache:  a2ensite 001-myapp.conf\nservice apache2 reload", 
            "title": "Create VirtualHost"
        }
    ]
}